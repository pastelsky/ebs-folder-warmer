# Test Dockerfile for rust-cache-warmer
# This builds and tests the project in a clean Linux environment

FROM ubuntu:22.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libaio-dev \
    liburing-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Set working directory
WORKDIR /workspace

# Copy source code
COPY rust-cache-warmer/ ./rust-cache-warmer/

# Build the project
RUN cd rust-cache-warmer && cargo build --release

# Test basic functionality
RUN cd rust-cache-warmer && \
    # Create test data
    mkdir -p /tmp/test-data && \
    echo "test file content" > /tmp/test-data/test.txt && \
    echo "another test file" > /tmp/test-data/test2.txt && \
    # Test help command
    ./target/release/rust-cache-warmer --help && \
    # Test version command  
    ./target/release/rust-cache-warmer --version && \
    # Test basic warming (should show strategy detection)
    ./target/release/rust-cache-warmer /tmp/test-data && \
    # Test with high-performance options (expected to fail gracefully in Docker)
    echo "Testing high-performance options (io_uring/libaio may fail in containers):" && \
    (./target/release/rust-cache-warmer --io-uring --libaio --direct-io /tmp/test-data || \
     echo "✅ High-performance options failed as expected in Docker container") && \
    echo "✅ All expected tests completed successfully"

# Set default command
CMD ["./rust-cache-warmer/target/release/rust-cache-warmer", "--help"] 