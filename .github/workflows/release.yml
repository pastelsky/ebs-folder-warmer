name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  static-analysis:
    name: Static Analysis Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libaio-dev cppcheck clang-tidy

    - name: Run quick static analysis
      run: |
        cd disk-warmer
        make
        make analyze-cppcheck analyze-clang-tidy

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: static-analysis
    strategy:
      matrix:
        include:
          # x86_64 builds
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
            name: disk-warmer-linux-x86_64
            cc: gcc
            
          # x86_64 with older glibc (more portable)
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
            name: disk-warmer-linux-x86_64-portable
            cc: gcc
            portable: true

          # x86_64 static build (maximum compatibility)
          - target: x86_64-unknown-linux-gnu
            arch: x86_64
            name: disk-warmer-linux-x86_64-static
            cc: gcc
            static: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libaio-dev
        
        # Install static libraries for static builds
        if [ "${{ matrix.static }}" = "true" ]; then
          echo "Installing static libraries for static build"
          sudo apt-get install -y libaio-dev:amd64
        fi
        
        # No additional dependencies needed for portable builds
        if [ "${{ matrix.portable }}" = "true" ]; then
          echo "Building portable version with dynamic libaio linking"
        fi

    - name: Build binary
      run: |
        cd disk-warmer
        
        # Choose build type based on matrix configuration
        if [ "${{ matrix.static }}" = "true" ]; then
          echo "Building static version for maximum compatibility"
          make static
          mv disk-warmer-static disk-warmer
        else
          echo "Building standard dynamic version"
          make
        fi
        
        # Verify the binary
        file disk-warmer
        ldd disk-warmer || echo "Static binary - no dynamic dependencies"

    - name: Create package
      run: |
        cd disk-warmer
        mkdir -p ../package/${{ matrix.name }}
        cp disk-warmer ../package/${{ matrix.name }}/
        cp ../README.md ../package/${{ matrix.name }}/
        
        # Create a simple install script
        cat > ../package/${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        INSTALL_DIR="/usr/local/bin"
        
        if [ "$EUID" -ne 0 ]; then
          echo "Please run as root (sudo ./install.sh)"
          exit 1
        fi
        
        echo "Installing disk-warmer to $INSTALL_DIR"
        cp disk-warmer "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/disk-warmer"
        
        echo "disk-warmer installed successfully!"
        echo "Usage: sudo disk-warmer [OPTIONS] <directory> <device>"
        EOF
        
        chmod +x ../package/${{ matrix.name }}/install.sh
        
        # Create tarball
        cd ../package
        tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: package/${{ matrix.name }}.tar.gz

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get tag name
      id: tag
      run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      run: |
        gh release create ${{ steps.tag.outputs.tag_name }} \
          --title "Release ${{ steps.tag.outputs.tag_name }}" \
          --notes "## EBS Folder Warmer ${{ steps.tag.outputs.tag_name }}
          
          High-performance disk warming utility for AWS EBS volumes and other block devices.
          
          ### Downloads
          
          Choose the appropriate binary for your system:
          
          - **disk-warmer-linux-x86_64.tar.gz** - Standard x86_64 build (most common)
          - **disk-warmer-linux-x86_64-portable.tar.gz** - Portable x86_64 build (wide compatibility)
          - **disk-warmer-linux-x86_64-static.tar.gz** - Static x86_64 build (maximum compatibility, no library dependencies)
          
          ### Installation
          
          1. Download the appropriate tarball for your architecture
          2. Extract: \`tar -xzf disk-warmer-linux-*.tar.gz\`
          3. Install: \`sudo ./disk-warmer-*/install.sh\`
          
          ### Usage
          
          \`\`\`bash
          # Warm directory only (default, fast)
          sudo disk-warmer /var/lib/mysql /dev/nvme1n1
          
          # Full disk warming (comprehensive)
          sudo disk-warmer --full-disk /var/lib/mysql /dev/nvme1n1
          \`\`\`
          
          See README.md in the package for detailed instructions.
          
          ### Changes
          
          See commit history for detailed changes in this release." \
          ./artifacts/*/disk-warmer-*.tar.gz
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job to create releases on main branch pushes (for development releases)
  create-dev-release:
    name: Create Development Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get short SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Delete existing dev release
      run: |
        gh release delete dev --yes || true
        git push --delete origin dev || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Development Release
      run: |
        gh release create dev \
          --title "Development Build (latest)" \
          --notes "Automated development build from latest main branch.
          
          **Commit:** ${{ steps.vars.outputs.sha_short }}
          
          This is a development release and may be unstable. For stable releases, use tagged versions.
          
          ### Downloads
          
          - **disk-warmer-linux-x86_64.tar.gz** - Standard x86_64 build
          - **disk-warmer-linux-x86_64-portable.tar.gz** - Portable x86_64 (wide compatibility)
          - **disk-warmer-linux-x86_64-static.tar.gz** - Static x86_64 (no library dependencies)" \
          --prerelease \
          ./artifacts/*/disk-warmer-*.tar.gz
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 