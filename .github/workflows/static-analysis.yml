name: Static Analysis

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'disk-warmer/**'
      - '.github/workflows/static-analysis.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'disk-warmer/**'
      - '.github/workflows/static-analysis.yml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  static-analysis:
    name: Static Analysis & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-tidy \
          clang

    - name: Build project (for analysis)
      run: |
        cd disk-warmer
        make clean
        make

    - name: Run cppcheck
      run: |
        cd disk-warmer
        make analyze-cppcheck
      continue-on-error: true

    - name: Run clang-tidy
      run: |
        cd disk-warmer
        make analyze-clang-tidy
      continue-on-error: true

    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-reports
        path: |
          disk-warmer/cppcheck-report.xml
        retention-days: 30

    - name: Parse cppcheck results
      if: always()
      run: |
        cd disk-warmer
        if [ -f cppcheck-report.xml ]; then
          echo "## üîç Cppcheck Results" >> $GITHUB_STEP_SUMMARY
          if grep -q "<error" cppcheck-report.xml; then
            echo "‚ö†Ô∏è Issues found. See artifact for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No issues found." >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Comment PR with analysis summary
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## üîç Static Analysis Results\n\n';
          
          // Check for cppcheck results
          const cppcheckFile = 'disk-warmer/cppcheck-report.xml';
          if (fs.existsSync(cppcheckFile)) {
            const content = fs.readFileSync(cppcheckFile, 'utf8');
            const errorCount = (content.match(/<error/g) || []).length;
            comment += `- **Cppcheck**: ${errorCount} issues found\n`;
          }
          
          comment += `- **Clang-tidy**: Analysis completed\n`;
          
          comment += '\nüìä Detailed reports are available in the [artifacts](https://github.com/' + 
                     context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ').\n';
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  sanitizer-builds:
    name: Sanitizer Builds
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        sanitizer: [address, undefined]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libaio-dev liburing-dev clang

    - name: Build with ${{ matrix.sanitizer }} sanitizer
      run: |
        cd disk-warmer
        make clean
        make sanitize-${{ matrix.sanitizer }}

    - name: Test basic functionality
      run: |
        cd disk-warmer
        timeout 10s ./disk-warmer-*san --help || true
        echo "Sanitizer build completed successfully"

    - name: Upload sanitizer binaries
      uses: actions/upload-artifact@v4
      with:
        name: sanitizer-${{ matrix.sanitizer }}-binary
        path: disk-warmer/disk-warmer-*san
        retention-days: 7 